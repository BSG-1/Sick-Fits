{"version":3,"file":"static/webpack/static/development/pages/update.js.5abff5cc0c0f4b180a18.hot-update.js","sources":["webpack:///./components/UpdateItem.js"],"sourcesContent":["import React, { Component } from 'react';\n//allows us to push data and actually make a change\nimport { Mutation, Query } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport Router from 'next/router';\nimport Form from './styles/Form';\nimport formatMoney from '../lib/formatMoney';\nimport Error from './ErrorMessage';\n\n//writing the queries for the mutations that capture the data and sends it to server\nconst SINGLE_ITEM_QUERY = gql`\n    query SINGLE_ITEM_QUERY($id: ID!){\n        item(where: { id: $id }){\n            id\n            title\n            description\n            price\n        }\n    }\n`;\n\nconst UPDATE_ITEM_MUTATION = gql`\n    # this mutation takes arguments, which will then be able to gather the input data and hold it in the query (createItem), which was specified from our backend in schema.graphql\n    mutation UPDATE_ITEM_MUTATION(\n        $title: String!\n        $description: String!\n        $price: Int!\n        $image: String\n        $largeImage: String\n    ) {\n        createItem(\n            title: $title\n            description: $description\n            price: $price\n            image: $image\n            largeImage: $largeImage\n        ) {\n            id\n        }\n    } \n`;\n\nclass UpdateItem extends Component {\n    state = {};\n\n    //wouldnt be able to bind a regular function\n    handleChange = e => {\n        const { name, type, value } = e.target;\n        const val = type === 'number' ? parseFloat(value) : value;\n        //works for ANY input\n        this.setState({ [name]: val });\n    };\n\n    render() {\n        return (\n            <Query\n                query={SINGLE_ITEM_QUERY}\n                variables={{\n                    id: this.props.id,\n                }}\n            >\n                {({ data, loading }) => {\n                    if (loading) return <p>Loading...</p>\n                    return (\n                        // Mutation wraps the entire form tag, exposing data to the query\n                        <Mutation mutation={UPDATE_ITEM_MUTATION} variables={this.state}>\n                            {(createItem, { loading, error }) => (\n                                //want to return everything from form implicitly (returns whatever is there without having to use the return keyword ==== closing for function and mutation tag moved to end of form!!!)                     \n                                <Form onSubmit={async e => {\n                                    //stops form from actually submitting; will stop url weirdness\n                                    e.preventDefault();\n                                    //call the mutation; await the exposed createItem function from backend\n                                    const res = await createItem();\n                                    //change them to the single item page\n                                    console.log(res);\n                                    Router.push({\n                                        pathname: '/item',\n                                        query: { id: res.data.createItem.id }\n                                    })\n                                }}\n                                >\n                                    <Error error={error} />\n                                    <fieldset disabled={loading} aria-busy={loading}>\n                                        <label htmlFor=\"title\">\n                                            Title\n                                <input\n                                                type=\"text\"\n                                                id=\"title\"\n                                                name=\"title\"\n                                                placeholder=\"Title\"\n                                                required\n                                                defaultValue={data.item.title}\n                                                onChange={this.handleChange}\n                                            />\n                                        </label>\n\n                                        <label htmlFor=\"price\">\n                                            Price\n                                <input\n                                                type=\"number\"\n                                                id=\"price\"\n                                                name=\"price\"\n                                                placeholder=\"Price\"\n                                                required\n                                                defaultValue={data.item.price}\n                                                onChange={this.handleChange}\n                                            />\n                                        </label>\n\n                                        <label htmlFor=\"description\">\n                                            Description\n                                <textarea\n                                                id=\"description\"\n                                                name=\"description\"\n                                                placeholder=\"Enter A Description\"\n                                                required\n                                                value={this.state.description}\n                                                onChange={this.handleChange}\n                                            />\n                                        </label>\n                                        <button type=\"submit\">Submit</button>\n                                    </fieldset>\n                                </Form>\n                            )}\n                        </Mutation>\n                    );\n                }}\n            </Query>\n        );\n    }\n}\n\nexport default UpdateItem;\n//named export using ES6\nexport { UPDATE_ITEM_MUTATION };"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAWA;AACA;AAoBA;;;;;;;;;;;;;;;;;;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;;;;;;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AADA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAFA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAtDA;AAAA;AAHA;AA+DA;AAGA;;;;AAvFA;AACA;AAyFA;AACA;;;;;A","sourceRoot":""}